# Z shell (also known as zsh).
## Config files:
# What should/shouldn't go in .zshenv, .zshrc, .zlogin, .zprofile, .zlogout?
# https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout
#
# Start order
# https://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/
# +----------------+-----------+-----------+------+
# |                |Interactive|Interactive|Script|
# |                |login      |non-login  |      |
# +----------------+-----------+-----------+------+
# |/etc/zshenv     |    A      |    A      |  A   |
# +----------------+-----------+-----------+------+
# |~/.zshenv       |    B      |    B      |  B   |
# +----------------+-----------+-----------+------+
# |/etc/zprofile   |    C      |           |      |
# +----------------+-----------+-----------+------+
# |~/.zprofile     |    D      |           |      |
# +----------------+-----------+-----------+------+
# |/etc/zshrc      |    E      |    C      |      |
# +----------------+-----------+-----------+------+
# |~/.zshrc        |    F      |    D      |      |
# +----------------+-----------+-----------+------+
# |/etc/zlogin     |    G      |           |      |
# +----------------+-----------+-----------+------+
# |~/.zlogin       |    H      |           |      |
# +----------------+-----------+-----------+------+
# |                |           |           |      |
# +----------------+-----------+-----------+------+
# |                |           |           |      |
# +----------------+-----------+-----------+------+
# |~/.zlogout      |    I      |           |      |
# +----------------+-----------+-----------+------+
# |/etc/zlogout    |    J      |           |      |
# +----------------+-----------+-----------+------+

## PATH
# https://scriptingosx.com/2017/05/where-paths-come-from/

### In .zshenv
# Current PATH:
  # /usr/bin
  # /bin
  # /usr/sbin
  # /sbin

### In .zprofile
# PATH set in /etc/zprofile from /etc/paths and /etc/paths.d/*:
# cat /etc/paths /etc/paths.d/*
# Current PATH:
  # /usr/local/bin
  # /System/Cryptexes/App/usr/bin
  # /usr/bin
  # /bin
  # /usr/sbin
  # /sbin
  # /Library/Apple/usr/bin
#

## START TB pre oh my zsh

# Debug
# Set DEBUGCLI=YES in .zshenv or un comment:
#export DEBUGCLI=YES
if [[ $DEBUGCLI == "YES" ]]; then
  echo "Start .zshrc"
  debug_file_call
fi

### Move zcompdump to cache
### https://stackoverflow.com/questions/62931101/i-have-multiple-files-of-zcompdump-why-do-i-have-multiple-files-of-these
export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST

# Set your language environment
# To make git use english
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Add Locations to $path Array
typeset -U path
path=(
  "$N_PREFIX/bin" # n for NodeJS
  $path
  "/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
)

## Set Variables
export NULLCMD=bat                                # Change from the dafault cat
export MANPAGER="sh -c 'col -bx | bat -l man -p'" # bat can be used as a colorizing pager for man, by setting the MANPAGER environment variable:
export BAT_THEME="Monokai Extended"               # Set bat theme. Find theme name with $ bat --list-themes
#export PAGER=bat # Discussion: a builtin pager for 'bat' #1053 - https://github.com/sharkdp/bat/issues/158

## History file configuration
[ -z "$HISTFILE" ] && HISTFILE="$HOME/.zsh_history"
[ "$HISTSIZE" -lt 50000 ] && HISTSIZE=50000 # Session Memory Limit
[ "$SAVEHIST" -lt 10000 ] && SAVEHIST=10000 # File Memory Limit

## History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_reduce_blanks     # Remove superfluous blanks from each command line being added to the history list
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data
setopt interactivecomments    # allow comments even in interactive shells
HISTORY_IGNORE="(ls|pwd|exit)"  # Ignore some commands


## ZSH-settings
## Load zsh profiling tool
###zmodload zsh/zprof
setopt globDots # Do not require a leading ‘.’ in a filename to be matched explicitly.

## Setup Python
path=(
  "$(brew --prefix python)/bin"
  $path
)
### The right and wrong way to set Python 3 as default on a Mac - https://opensource.com/article/19/5/python-3-default-mac
alias python=python3
alias pip=pip3
## Python mail
export EMAIL_USER_T="t.backman@gmail.com"
#TODO 1p: export EMAIL_PASSWORD_T=""

# Golang
#export GOPATH=$HOME/go
## Not used:export GOROOT="$(brew --prefix golang)/libexec"
#export GOROOT=/usr/local/go
## Not used:export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"
#export PATH=$PATH:$GOPATH/bin
#export PATH=$PATH:$GOROOT/bin
## Not used:export PATH=$PATH:$GOPATH/bin
## Not used:export PATH=$PATH:$GOROOT/bin
## Not used:export GO111MODULE=off

## Setop Java
#export JAVA_HOME=$(/usr/libexec/java_home)

## PostgreSQL DB Posseidon
export DB_HOST="docker"
export DB_NAME="postgres"
export DB_USER="postgres"
#TODO 1p: export DB_PASS=""

## Local DB för skolan
#TODO 1p: export POSTGRES_PASSWORD="MHd..."  #TODO

## Time zsh load time
timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

## Aliases
alias myip="curl http://ipecho.net/plain; echo"
alias trail='<<<${(F)path}'
alias ftrail='<<<${(F)fpath}'
alias debugOn='DEBUGCLI=YES exec zsh'
alias debugOff='DEBUGCLI=NO exec zsh'
alias brewfile-check="code $HOME/.local/share/chezmoi"
alias brewfile-push="brew bundle dump --force cleanup && chezmoi add $HOME/.dotfiles/Brewfile"
alias brewfile-apply="chezmoi apply $HOME/.dotfiles/Brewfile && brew bundle install && brew bundle cleanup --force"
alias ll='eza --long --all --classify --header --git --time-style=long-iso --icons --tree -L=1 --color-scale'
alias ls='eza --grid --icons'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias ranger='ranger --choosedir=$HOME/.config/ranger/.rangerdir; LASTDIR=`cat $HOME/.config/ranger/.rangerdir`; cd "$LASTDIR"'
alias fzfkill='ps aux | fzf | awk '{print $2}' | xargs kill'
#-- Chezmoi add all modifyed files to working copy
alias caa='chezmoi status | grep ^MM | awk "{print \$2}" | xargs -n1 -I {} chezmoi add -v "$HOME"/{}'
alias cs='chezmoi status'
#-- Change dir
alias cdchezmoi='cd ~/.local/share/chezmoi'
alias tbls='ls'

### NNN
#source $HOME/.dotfiles/nnn.zsh

### Jump command
[ -f $HOMEBREW_PREFIX/etc/profile.d/autojump.sh ] && . $HOMEBREW_PREFIX/etc/profile.d/autojump.sh

{{ onepasswordRead "op://Personal/dot_files_z/z_conf" }}

## Use emacs key bindings. [zsh: highlighting, autosuggestion, themes, binding, alias, fzf | SmartTech101](https://smarttech101.com/zsh-highlighting-autosuggestion-themes-binding-alias-fzf/#emacs_keybindings)
bindkey -e

# Enable Ctrl-x-e to edit command line
# https://nuclearsquid.com/writings/edit-long-commands/
autoload -U edit-command-line
# Emacs style
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line
# Vi style:
# zle -N edit-command-line
# bindkey -M vicmd v edit-command-line
# Conf delete key
bindkey "^[[3~" delete-char

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots) # Include hidden files.

# Configure spaceship prompt
#source "$(brew --prefix spaceship)/spaceship.zsh"

# Customize Prompt(s)
source "$DOTFILES/spaceship_shlvl.zsh"

SPACESHIP_CHAR_SYMBOL="$ "
SPACESHIP_CHAR_SYMBOL_ROOT="# "
SPACESHIP_PROMPT_ADD_NEWLINE=false
SPACESHIP_PROMPT_SEPARATE_LINE=true
SPACESHIP_TIME_SHOW=true
#SPACESHIP_EXEC_TIME_ELAPSED=0
SPACESHIP_EXIT_CODE_SHOW=true

SPACESHIP_PROMPT_ORDER=(
  user           # Username section
  dir            # Current directory section
  host           # Hostname section
  git            # Git section (git_branch + git_status)
#  hg             # Mercurial section (hg_branch  + hg_status)
  package        # Package version
#  node           # Node.js section
#  bun            # Bun section
#  deno           # Deno section
#  ruby           # Ruby section
  python         # Python section
#  elm            # Elm section
#  elixir         # Elixir section
#  xcode          # Xcode section
#  swift          # Swift section
#  golang         # Go section
#  perl           # Perl section
#  php            # PHP section
#  rust           # Rust section
#  haskell        # Haskell Stack section
#  scala          # Scala section
#  kotlin         # Kotlin section
#  java           # Java section
#  lua            # Lua section
#  dart           # Dart section
#  julia          # Julia section
#  crystal        # Crystal section
  docker         # Docker section
##  docker_compose # Docker section
#  aws            # Amazon Web Services section
#  gcloud         # Google Cloud Platform section
#  azure          # Azure section
  venv           # virtualenv section
#  conda          # conda virtualenv section
#  dotnet         # .NET section
#  ocaml          # OCaml section
#  vlang          # V section
#  zig            # Zig section
#  purescript     # PureScript section
#  erlang         # Erlang section
#  kubectl        # Kubectl context section
#  ansible        # Ansible section
#  terraform      # Terraform workspace section
#  pulumi         # Pulumi stack section
#  ibmcloud       # IBM Cloud section
#  nix_shell      # Nix shell
#  gnu_screen     # GNU Screen section
  async          # Async jobs indicator
  line_sep       # Line break
  shlvl          # Custom section from spaceship_shlvl.zsh
#  battery        # Battery level and status
  jobs           # Background jobs indicator
  exit_code      # Exit code section
  sudo           # Sudo indicator
  char           # Prompt character
)

SPACESHIP_RPROMPT_ORDER=(
  exec_time # Execution time
  time      # Time stamps section
)

# iTerm
test -e "${ZDOTDIR}/.iterm2_shell_integration.zsh" && source "${ZDOTDIR}/.iterm2_shell_integration.zsh"

# Load plugins
# Download plugins with "chezmoi apply" defined in "~/.local/share/chezmoi/home/.chezmoiexternal.toml"
# Ref: https://www.reddit.com/r/zsh/comments/vryjud/what_is_the_best_plugin_manager_in_your_opinion/
# Run autoload before or after plugins?
ZSH_CUSTOM_PLUGINS=$XDG_CONFIG_HOME/zsh/plugins
ZSH_CUSTOM_COMPLETIONS=$XDG_CONFIG_HOME/zsh/completions
if [ -d $ZSH_CUSTOM_PLUGINS/zsh-autosuggestions ]; then
  source $ZSH_CUSTOM_PLUGINS/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh #OK 2023-03-31
fi
if [ -d $ZSH_CUSTOM_PLUGINS/zsh-syntax-highlighting ]; then
  source $ZSH_CUSTOM_PLUGINS/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh #OK 2023-03-31
fi
if [ -d $ZSH_CUSTOM_PLUGINS/history-search-multi-word ]; then
  source $ZSH_CUSTOM_PLUGINS/history-search-multi-word/H-S-MW.plugin.zsh #OK 2023-03-31 ctrl-r
fi
# load spaceship
if [ -d $ZSH_CUSTOM_PLUGINS/spaceship-prompt ]; then
  source $ZSH_CUSTOM_PLUGINS/spaceship-prompt/spaceship.zsh
fi
if [ -d $ZSH_CUSTOM_PLUGINS/zsh-defer ]; then
  source $ZSH_CUSTOM_PLUGINS/zsh-defer/zsh-defer.plugin.zsh
  alias src='zsh-defer source'
fi
if [ -d $ZSH_CUSTOM_PLUGINS/ohmyzsh ]; then
  ohmyplugins="$ZSH_CUSTOM_PLUGINS/ohmyzsh/plugins"
  if command_exists docker; then
    fpath=("$ohmyplugins/docker" $fpath)
    src "$ohmyplugins/docker/docker.plugin.zsh"
    fpath=("$ohmyplugins/docker-compose" $fpath)
    src "$ohmyplugins/docker-compose/docker-compose.plugin.zsh"
  fi
  if command_exists git; then #OK 2023-03-31
    fpath=("$ohmyplugins/gitfast" $fpath)
    src "$ohmyplugins/gitfast/git-prompt.sh"
    src "$ohmyplugins/gitfast/gitfast.plugin.zsh"
  fi
  if command_exists go; then
    src "$ohmyplugins/golang/golang.plugin.zsh"
  fi
  if command_exists kubectl; then
    src "$ohmyplugins/kubectl/kubectl.plugin.zsh"
    # Exists: [[ $commands[kubectl] ]] &&
    source <(kubectl completion zsh)
  fi
fi

# Fuzzy finder
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if [[ $DEBUGCLI == "YES" ]]; then
  debug_file_call
  echo "End .zshrc"
fi
